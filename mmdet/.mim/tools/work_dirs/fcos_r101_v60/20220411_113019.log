2022-04-11 11:30:19,936 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.7.11 (default, Jul 27 2021, 14:32:16) [GCC 7.5.0]
CUDA available: True
GPU 0,1,2,3,4,5,6,7: NVIDIA TITAN V
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 10.1, V10.1.243
GCC: gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609
PyTorch: 1.8.0+cu101
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 10.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70
  - CuDNN 7.6.3
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=10.1, CUDNN_VERSION=7.6.3, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.9.0+cu101
OpenCV: 4.5.4-dev
MMCV: 1.3.17
MMCV Compiler: GCC 7.3
MMCV CUDA Compiler: 10.1
MMDetection: 2.17.0+
------------------------------------------------------------

2022-04-11 11:30:23,860 - mmdet - INFO - Distributed training: False
2022-04-11 11:30:27,572 - mmdet - INFO - Config:
model = dict(
    type='FCOS',
    backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=False),
        norm_eval=True,
        style='caffe',
        init_cfg=dict(
            type='Pretrained',
            checkpoint='open-mmlab://detectron/resnet101_caffe')),
    neck=dict(
        type='FPN',
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        start_level=1,
        add_extra_convs='on_output',
        num_outs=5,
        relu_before_extra_convs=True),
    bbox_head=dict(
        type='FCOSHead',
        num_classes=1,
        in_channels=256,
        stacked_convs=4,
        feat_channels=256,
        strides=[8, 16, 32, 64, 128],
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.0),
        loss_bbox=dict(type='GIoULoss', loss_weight=1.0),
        loss_centerness=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_att_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=0.0)),
    train_cfg=dict(
        assigner=dict(
            type='MaxIoUAssigner',
            pos_iou_thr=0.5,
            neg_iou_thr=0.4,
            min_pos_iou=0,
            ignore_iof_thr=-1),
        allowed_border=-1,
        pos_weight=-1,
        debug=False),
    test_cfg=dict(
        nms_pre=1000,
        min_bbox_size=0,
        score_thr=0.05,
        nms=dict(type='nms', iou_threshold=0.5),
        max_per_img=100))
dataset_type = 'RefCrowdDataset'
data_root = '/data1/data/QiuHeqian/code/refcrowdhuman_qhq/refcrowd_dataset/'
img_norm_cfg = dict(
    mean=[102.9801, 115.9465, 122.7717], std=[1.0, 1.0, 1.0], to_rgb=False)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.0),
    dict(
        type='Normalize',
        mean=[102.9801, 115.9465, 122.7717],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(
        type='Collect',
        keys=[
            'img', 'gt_bboxes', 'gt_labels', 'refer_labels', 'att_labels',
            'att_label_weights'
        ])
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(
                type='Normalize',
                mean=[102.9801, 115.9465, 122.7717],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img', 'refer_labels'])
        ])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='RefCrowdDataset',
        ann_file=[
            '/data1/data/QiuHeqian/code/refcrowdhuman_qhq/refcrowd_dataset/annotations/220331/refcrowd2021_revised_220331_h5id_whole_v2_select_86_attref_train.json'
        ],
        img_prefix=
        '/data1/data/QiuHeqian/code/refcrowdhuman_qhq/refcrowd_dataset/crowdhuman2021/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True),
            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
            dict(type='RandomFlip', flip_ratio=0.0),
            dict(
                type='Normalize',
                mean=[102.9801, 115.9465, 122.7717],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=[
                    'img', 'gt_bboxes', 'gt_labels', 'refer_labels',
                    'att_labels', 'att_label_weights'
                ])
        ]),
    val=dict(
        type='RefCrowdDataset',
        ann_file=[
            '/data1/data/QiuHeqian/code/refcrowdhuman_qhq/refcrowd_dataset/annotations/220331/refcrowd2021_revised_220331_h5id_whole_v2_select_86_attref_val.json'
        ],
        img_prefix=
        '/data1/data/QiuHeqian/code/refcrowdhuman_qhq/refcrowd_dataset/crowdhuman2021/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[102.9801, 115.9465, 122.7717],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img', 'refer_labels'])
                ])
        ]),
    test=dict(
        type='RefCrowdDataset',
        ann_file=
        '/data1/data/QiuHeqian/code/refcrowdhuman_qhq/refcrowd_dataset/annotations/220331/refcrowd2021_revised_220331_h5id_whole_v2_select_86_attref_test.json',
        img_prefix=
        '/data1/data/QiuHeqian/code/refcrowdhuman_qhq/refcrowd_dataset/crowdhuman2021/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=(1333, 800),
                flip=False,
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[102.9801, 115.9465, 122.7717],
                        std=[1.0, 1.0, 1.0],
                        to_rgb=False),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img', 'refer_labels'])
                ])
        ]))
evaluation = dict(interval=1, metric='Top1Acc')
optimizer = dict(
    type='SGD',
    lr=0.002,
    momentum=0.9,
    weight_decay=0.0001,
    paramwise_cfg=dict(
        bias_lr_mult=2.0,
        bias_decay_mult=0.0,
        custom_keys=dict({
            'dynamic_fcs':
            dict(lr_mult=10.0, decay_mult=1.0),
            'rnn_encoder':
            dict(lr_mult=10.0, decay_mult=1.0),
            'crowd':
            dict(lr_mult=10.0, decay_mult=1.0),
            'att':
            dict(lr_mult=10.0, decay_mult=1.0),
            'bbox_head.conv_cls':
            dict(lr_mult=10.0, decay_mult=1.0)
        })))
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='step',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333,
    step=[8, 11])
runner = dict(type='EpochBasedRunner', max_epochs=12)
checkpoint_config = dict(interval=1)
log_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])
custom_hooks = [dict(type='NumClassCheckHook')]
dist_params = dict(backend='nccl')
log_level = 'INFO'
resume_from = None
workflow = [('train', 1)]
load_from = '/data1/data/QiuHeqian/code/refcrowdhuman_qhq/mmdetection-master-ACMMM2022/pretrained_models/fcos_r101_caffe_fpn_gn-head_mstrain_640-800_2x_coco-511424d6.pth'
work_dir = './work_dirs/fcos_r101_v60'
gpu_ids = range(0, 1)

2022-04-11 11:30:28,548 - mmdet - INFO - initialize ResNet with init_cfg {'type': 'Pretrained', 'checkpoint': 'open-mmlab://detectron/resnet101_caffe'}
2022-04-11 11:30:28,867 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
2022-04-11 11:30:28,898 - mmdet - INFO - initialize FCOSHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01, 'override': {'type': 'Normal', 'name': 'conv_cls', 'std': 0.01, 'bias_prob': 0.01}}
Name of parameter - Initialization information

att_memory - torch.Size([86, 256]): 
The value is the same before and after calling `init_weights` of FCOS  

rnn_encoder.embedding.weight - torch.Size([2022, 512]): 
The value is the same before and after calling `init_weights` of FCOS  

rnn_encoder.mlp.0.weight - torch.Size([512, 512]): 
The value is the same before and after calling `init_weights` of FCOS  

rnn_encoder.mlp.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of FCOS  

rnn_encoder.rnn.weight_ih_l0 - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of FCOS  

rnn_encoder.rnn.weight_hh_l0 - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of FCOS  

rnn_encoder.rnn.bias_ih_l0 - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FCOS  

rnn_encoder.rnn.bias_hh_l0 - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FCOS  

rnn_encoder.rnn.weight_ih_l0_reverse - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of FCOS  

rnn_encoder.rnn.weight_hh_l0_reverse - torch.Size([2048, 512]): 
The value is the same before and after calling `init_weights` of FCOS  

rnn_encoder.rnn.bias_ih_l0_reverse - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FCOS  

rnn_encoder.rnn.bias_hh_l0_reverse - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.0.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.3.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.4.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.5.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.6.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.7.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.0.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.0.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.3.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.4.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.5.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.6.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.7.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.1.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.0.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.3.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.4.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.5.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.6.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.7.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.2.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.0.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.3.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.4.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.5.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.6.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.7.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.3.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.0.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.1.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.3.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.4.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.5.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.6.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.6.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.7.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_parent.4.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.0.weight - torch.Size([8, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.1.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.2.weight - torch.Size([18, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.2.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.3.weight - torch.Size([13, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.3.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.4.weight - torch.Size([13, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.4.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.5.weight - torch.Size([11, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.5.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.6.weight - torch.Size([7, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.6.bias - torch.Size([7]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.7.weight - torch.Size([14, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.0.7.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.0.weight - torch.Size([8, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.1.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.2.weight - torch.Size([18, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.2.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.3.weight - torch.Size([13, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.3.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.4.weight - torch.Size([13, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.4.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.5.weight - torch.Size([11, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.5.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.6.weight - torch.Size([7, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.6.bias - torch.Size([7]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.7.weight - torch.Size([14, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.1.7.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.0.weight - torch.Size([8, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.1.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.2.weight - torch.Size([18, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.2.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.3.weight - torch.Size([13, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.3.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.4.weight - torch.Size([13, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.4.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.5.weight - torch.Size([11, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.5.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.6.weight - torch.Size([7, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.6.bias - torch.Size([7]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.7.weight - torch.Size([14, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.2.7.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.0.weight - torch.Size([8, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.1.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.2.weight - torch.Size([18, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.2.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.3.weight - torch.Size([13, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.3.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.4.weight - torch.Size([13, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.4.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.5.weight - torch.Size([11, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.5.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.6.weight - torch.Size([7, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.6.bias - torch.Size([7]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.7.weight - torch.Size([14, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.3.7.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.0.weight - torch.Size([8, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.1.weight - torch.Size([2, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.2.weight - torch.Size([18, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.2.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.3.weight - torch.Size([13, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.3.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.4.weight - torch.Size([13, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.4.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.5.weight - torch.Size([11, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.5.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.6.weight - torch.Size([7, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.6.bias - torch.Size([7]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.7.weight - torch.Size([14, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_sub.4.7.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.0.weight - torch.Size([8, 2048]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.1.weight - torch.Size([2, 512]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.2.weight - torch.Size([18, 4608]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.2.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.3.weight - torch.Size([13, 3328]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.3.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.4.weight - torch.Size([13, 3328]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.4.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.5.weight - torch.Size([11, 2816]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.5.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.6.weight - torch.Size([7, 1792]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.6.bias - torch.Size([7]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.7.weight - torch.Size([14, 3584]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.0.7.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.0.weight - torch.Size([8, 2048]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.1.weight - torch.Size([2, 512]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.2.weight - torch.Size([18, 4608]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.2.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.3.weight - torch.Size([13, 3328]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.3.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.4.weight - torch.Size([13, 3328]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.4.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.5.weight - torch.Size([11, 2816]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.5.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.6.weight - torch.Size([7, 1792]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.6.bias - torch.Size([7]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.7.weight - torch.Size([14, 3584]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.1.7.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.0.weight - torch.Size([8, 2048]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.1.weight - torch.Size([2, 512]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.2.weight - torch.Size([18, 4608]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.2.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.3.weight - torch.Size([13, 3328]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.3.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.4.weight - torch.Size([13, 3328]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.4.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.5.weight - torch.Size([11, 2816]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.5.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.6.weight - torch.Size([7, 1792]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.6.bias - torch.Size([7]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.7.weight - torch.Size([14, 3584]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.2.7.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.0.weight - torch.Size([8, 2048]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.1.weight - torch.Size([2, 512]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.2.weight - torch.Size([18, 4608]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.2.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.3.weight - torch.Size([13, 3328]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.3.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.4.weight - torch.Size([13, 3328]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.4.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.5.weight - torch.Size([11, 2816]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.5.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.6.weight - torch.Size([7, 1792]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.6.bias - torch.Size([7]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.7.weight - torch.Size([14, 3584]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.3.7.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.0.weight - torch.Size([8, 2048]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.0.bias - torch.Size([8]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.1.weight - torch.Size([2, 512]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.1.bias - torch.Size([2]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.2.weight - torch.Size([18, 4608]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.2.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.3.weight - torch.Size([13, 3328]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.3.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.4.weight - torch.Size([13, 3328]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.4.bias - torch.Size([13]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.5.weight - torch.Size([11, 2816]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.5.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.6.weight - torch.Size([7, 1792]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.6.bias - torch.Size([7]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.7.weight - torch.Size([14, 3584]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_fcs_att.4.7.bias - torch.Size([14]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_final.0.weight - torch.Size([256, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_final.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_final.1.weight - torch.Size([256, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_final.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_final.2.weight - torch.Size([256, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_final.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_final.3.weight - torch.Size([256, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_final.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_final.4.weight - torch.Size([256, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of FCOS  

crowd_convs_final.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.6.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.6.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.6.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.6.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.7.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.7.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.7.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.7.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.8.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.8.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.8.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.8.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.9.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.9.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.9.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.9.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.10.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.10.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.10.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.10.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.11.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.11.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.11.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.11.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.12.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.12.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.12.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.12.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.13.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.13.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.13.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.13.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.14.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.14.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.14.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.14.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.15.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.15.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.15.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.15.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.16.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.16.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.16.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.16.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.17.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.17.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.17.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.17.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.18.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.18.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.18.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.18.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.19.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.19.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.19.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.19.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.20.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.20.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.20.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.20.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.21.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.21.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.21.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.21.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.22.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.22.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.22.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.22.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://detectron/resnet101_caffe 

neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

neck.fpn_convs.4.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

neck.fpn_convs.4.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.cls_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.cls_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.cls_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.cls_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.cls_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.cls_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.cls_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.cls_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.cls_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.cls_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.cls_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.cls_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.reg_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.reg_convs.0.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.reg_convs.0.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.reg_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.reg_convs.1.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.reg_convs.1.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.reg_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.reg_convs.2.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.reg_convs.2.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.reg_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.reg_convs.3.gn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.reg_convs.3.gn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.conv_cls.weight - torch.Size([1, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=-4.59511985013459 

bbox_head.conv_cls.bias - torch.Size([1]): 
NormalInit: mean=0, std=0.01, bias=-4.59511985013459 

bbox_head.conv_reg.weight - torch.Size([4, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.conv_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.conv_centerness.weight - torch.Size([1, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.conv_centerness.bias - torch.Size([1]): 
NormalInit: mean=0, std=0.01, bias=0 

bbox_head.scales.0.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.scales.1.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.scales.2.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.scales.3.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOS  

bbox_head.scales.4.scale - torch.Size([]): 
The value is the same before and after calling `init_weights` of FCOS  
2022-04-11 11:30:42,057 - mmdet - INFO - load checkpoint from local path: /data1/data/QiuHeqian/code/refcrowdhuman_qhq/mmdetection-master-ACMMM2022/pretrained_models/fcos_r101_caffe_fpn_gn-head_mstrain_640-800_2x_coco-511424d6.pth
2022-04-11 11:30:42,387 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for bbox_head.conv_cls.weight: copying a param with shape torch.Size([80, 256, 3, 3]) from checkpoint, the shape in current model is torch.Size([1, 256, 3, 3]).
size mismatch for bbox_head.conv_cls.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([1]).
missing keys in source state_dict: att_memory, rnn_encoder.embedding.weight, rnn_encoder.mlp.0.weight, rnn_encoder.mlp.0.bias, rnn_encoder.rnn.weight_ih_l0, rnn_encoder.rnn.weight_hh_l0, rnn_encoder.rnn.bias_ih_l0, rnn_encoder.rnn.bias_hh_l0, rnn_encoder.rnn.weight_ih_l0_reverse, rnn_encoder.rnn.weight_hh_l0_reverse, rnn_encoder.rnn.bias_ih_l0_reverse, rnn_encoder.rnn.bias_hh_l0_reverse, crowd_fcs_parent.0.0.weight, crowd_fcs_parent.0.0.bias, crowd_fcs_parent.0.1.weight, crowd_fcs_parent.0.1.bias, crowd_fcs_parent.0.2.weight, crowd_fcs_parent.0.2.bias, crowd_fcs_parent.0.3.weight, crowd_fcs_parent.0.3.bias, crowd_fcs_parent.0.4.weight, crowd_fcs_parent.0.4.bias, crowd_fcs_parent.0.5.weight, crowd_fcs_parent.0.5.bias, crowd_fcs_parent.0.6.weight, crowd_fcs_parent.0.6.bias, crowd_fcs_parent.0.7.weight, crowd_fcs_parent.0.7.bias, crowd_fcs_parent.1.0.weight, crowd_fcs_parent.1.0.bias, crowd_fcs_parent.1.1.weight, crowd_fcs_parent.1.1.bias, crowd_fcs_parent.1.2.weight, crowd_fcs_parent.1.2.bias, crowd_fcs_parent.1.3.weight, crowd_fcs_parent.1.3.bias, crowd_fcs_parent.1.4.weight, crowd_fcs_parent.1.4.bias, crowd_fcs_parent.1.5.weight, crowd_fcs_parent.1.5.bias, crowd_fcs_parent.1.6.weight, crowd_fcs_parent.1.6.bias, crowd_fcs_parent.1.7.weight, crowd_fcs_parent.1.7.bias, crowd_fcs_parent.2.0.weight, crowd_fcs_parent.2.0.bias, crowd_fcs_parent.2.1.weight, crowd_fcs_parent.2.1.bias, crowd_fcs_parent.2.2.weight, crowd_fcs_parent.2.2.bias, crowd_fcs_parent.2.3.weight, crowd_fcs_parent.2.3.bias, crowd_fcs_parent.2.4.weight, crowd_fcs_parent.2.4.bias, crowd_fcs_parent.2.5.weight, crowd_fcs_parent.2.5.bias, crowd_fcs_parent.2.6.weight, crowd_fcs_parent.2.6.bias, crowd_fcs_parent.2.7.weight, crowd_fcs_parent.2.7.bias, crowd_fcs_parent.3.0.weight, crowd_fcs_parent.3.0.bias, crowd_fcs_parent.3.1.weight, crowd_fcs_parent.3.1.bias, crowd_fcs_parent.3.2.weight, crowd_fcs_parent.3.2.bias, crowd_fcs_parent.3.3.weight, crowd_fcs_parent.3.3.bias, crowd_fcs_parent.3.4.weight, crowd_fcs_parent.3.4.bias, crowd_fcs_parent.3.5.weight, crowd_fcs_parent.3.5.bias, crowd_fcs_parent.3.6.weight, crowd_fcs_parent.3.6.bias, crowd_fcs_parent.3.7.weight, crowd_fcs_parent.3.7.bias, crowd_fcs_parent.4.0.weight, crowd_fcs_parent.4.0.bias, crowd_fcs_parent.4.1.weight, crowd_fcs_parent.4.1.bias, crowd_fcs_parent.4.2.weight, crowd_fcs_parent.4.2.bias, crowd_fcs_parent.4.3.weight, crowd_fcs_parent.4.3.bias, crowd_fcs_parent.4.4.weight, crowd_fcs_parent.4.4.bias, crowd_fcs_parent.4.5.weight, crowd_fcs_parent.4.5.bias, crowd_fcs_parent.4.6.weight, crowd_fcs_parent.4.6.bias, crowd_fcs_parent.4.7.weight, crowd_fcs_parent.4.7.bias, crowd_convs_sub.0.0.weight, crowd_convs_sub.0.0.bias, crowd_convs_sub.0.1.weight, crowd_convs_sub.0.1.bias, crowd_convs_sub.0.2.weight, crowd_convs_sub.0.2.bias, crowd_convs_sub.0.3.weight, crowd_convs_sub.0.3.bias, crowd_convs_sub.0.4.weight, crowd_convs_sub.0.4.bias, crowd_convs_sub.0.5.weight, crowd_convs_sub.0.5.bias, crowd_convs_sub.0.6.weight, crowd_convs_sub.0.6.bias, crowd_convs_sub.0.7.weight, crowd_convs_sub.0.7.bias, crowd_convs_sub.1.0.weight, crowd_convs_sub.1.0.bias, crowd_convs_sub.1.1.weight, crowd_convs_sub.1.1.bias, crowd_convs_sub.1.2.weight, crowd_convs_sub.1.2.bias, crowd_convs_sub.1.3.weight, crowd_convs_sub.1.3.bias, crowd_convs_sub.1.4.weight, crowd_convs_sub.1.4.bias, crowd_convs_sub.1.5.weight, crowd_convs_sub.1.5.bias, crowd_convs_sub.1.6.weight, crowd_convs_sub.1.6.bias, crowd_convs_sub.1.7.weight, crowd_convs_sub.1.7.bias, crowd_convs_sub.2.0.weight, crowd_convs_sub.2.0.bias, crowd_convs_sub.2.1.weight, crowd_convs_sub.2.1.bias, crowd_convs_sub.2.2.weight, crowd_convs_sub.2.2.bias, crowd_convs_sub.2.3.weight, crowd_convs_sub.2.3.bias, crowd_convs_sub.2.4.weight, crowd_convs_sub.2.4.bias, crowd_convs_sub.2.5.weight, crowd_convs_sub.2.5.bias, crowd_convs_sub.2.6.weight, crowd_convs_sub.2.6.bias, crowd_convs_sub.2.7.weight, crowd_convs_sub.2.7.bias, crowd_convs_sub.3.0.weight, crowd_convs_sub.3.0.bias, crowd_convs_sub.3.1.weight, crowd_convs_sub.3.1.bias, crowd_convs_sub.3.2.weight, crowd_convs_sub.3.2.bias, crowd_convs_sub.3.3.weight, crowd_convs_sub.3.3.bias, crowd_convs_sub.3.4.weight, crowd_convs_sub.3.4.bias, crowd_convs_sub.3.5.weight, crowd_convs_sub.3.5.bias, crowd_convs_sub.3.6.weight, crowd_convs_sub.3.6.bias, crowd_convs_sub.3.7.weight, crowd_convs_sub.3.7.bias, crowd_convs_sub.4.0.weight, crowd_convs_sub.4.0.bias, crowd_convs_sub.4.1.weight, crowd_convs_sub.4.1.bias, crowd_convs_sub.4.2.weight, crowd_convs_sub.4.2.bias, crowd_convs_sub.4.3.weight, crowd_convs_sub.4.3.bias, crowd_convs_sub.4.4.weight, crowd_convs_sub.4.4.bias, crowd_convs_sub.4.5.weight, crowd_convs_sub.4.5.bias, crowd_convs_sub.4.6.weight, crowd_convs_sub.4.6.bias, crowd_convs_sub.4.7.weight, crowd_convs_sub.4.7.bias, crowd_fcs_att.0.0.weight, crowd_fcs_att.0.0.bias, crowd_fcs_att.0.1.weight, crowd_fcs_att.0.1.bias, crowd_fcs_att.0.2.weight, crowd_fcs_att.0.2.bias, crowd_fcs_att.0.3.weight, crowd_fcs_att.0.3.bias, crowd_fcs_att.0.4.weight, crowd_fcs_att.0.4.bias, crowd_fcs_att.0.5.weight, crowd_fcs_att.0.5.bias, crowd_fcs_att.0.6.weight, crowd_fcs_att.0.6.bias, crowd_fcs_att.0.7.weight, crowd_fcs_att.0.7.bias, crowd_fcs_att.1.0.weight, crowd_fcs_att.1.0.bias, crowd_fcs_att.1.1.weight, crowd_fcs_att.1.1.bias, crowd_fcs_att.1.2.weight, crowd_fcs_att.1.2.bias, crowd_fcs_att.1.3.weight, crowd_fcs_att.1.3.bias, crowd_fcs_att.1.4.weight, crowd_fcs_att.1.4.bias, crowd_fcs_att.1.5.weight, crowd_fcs_att.1.5.bias, crowd_fcs_att.1.6.weight, crowd_fcs_att.1.6.bias, crowd_fcs_att.1.7.weight, crowd_fcs_att.1.7.bias, crowd_fcs_att.2.0.weight, crowd_fcs_att.2.0.bias, crowd_fcs_att.2.1.weight, crowd_fcs_att.2.1.bias, crowd_fcs_att.2.2.weight, crowd_fcs_att.2.2.bias, crowd_fcs_att.2.3.weight, crowd_fcs_att.2.3.bias, crowd_fcs_att.2.4.weight, crowd_fcs_att.2.4.bias, crowd_fcs_att.2.5.weight, crowd_fcs_att.2.5.bias, crowd_fcs_att.2.6.weight, crowd_fcs_att.2.6.bias, crowd_fcs_att.2.7.weight, crowd_fcs_att.2.7.bias, crowd_fcs_att.3.0.weight, crowd_fcs_att.3.0.bias, crowd_fcs_att.3.1.weight, crowd_fcs_att.3.1.bias, crowd_fcs_att.3.2.weight, crowd_fcs_att.3.2.bias, crowd_fcs_att.3.3.weight, crowd_fcs_att.3.3.bias, crowd_fcs_att.3.4.weight, crowd_fcs_att.3.4.bias, crowd_fcs_att.3.5.weight, crowd_fcs_att.3.5.bias, crowd_fcs_att.3.6.weight, crowd_fcs_att.3.6.bias, crowd_fcs_att.3.7.weight, crowd_fcs_att.3.7.bias, crowd_fcs_att.4.0.weight, crowd_fcs_att.4.0.bias, crowd_fcs_att.4.1.weight, crowd_fcs_att.4.1.bias, crowd_fcs_att.4.2.weight, crowd_fcs_att.4.2.bias, crowd_fcs_att.4.3.weight, crowd_fcs_att.4.3.bias, crowd_fcs_att.4.4.weight, crowd_fcs_att.4.4.bias, crowd_fcs_att.4.5.weight, crowd_fcs_att.4.5.bias, crowd_fcs_att.4.6.weight, crowd_fcs_att.4.6.bias, crowd_fcs_att.4.7.weight, crowd_fcs_att.4.7.bias, crowd_convs_final.0.weight, crowd_convs_final.0.bias, crowd_convs_final.1.weight, crowd_convs_final.1.bias, crowd_convs_final.2.weight, crowd_convs_final.2.bias, crowd_convs_final.3.weight, crowd_convs_final.3.bias, crowd_convs_final.4.weight, crowd_convs_final.4.bias

2022-04-11 11:30:42,398 - mmdet - INFO - Start running, host: amax@amax, work_dir: /data1/data/QiuHeqian/code/refcrowdhuman_qhq/mmdetection-master-ACMMM2022/tools/work_dirs/fcos_r101_v60
2022-04-11 11:30:42,399 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) NumClassCheckHook                  
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2022-04-11 11:30:42,399 - mmdet - INFO - workflow: [('train', 1)], max: 12 epochs
2022-04-11 11:30:42,399 - mmdet - INFO - Checkpoints will be saved to /data1/data/QiuHeqian/code/refcrowdhuman_qhq/mmdetection-master-ACMMM2022/tools/work_dirs/fcos_r101_v60 by HardDiskBackend.
